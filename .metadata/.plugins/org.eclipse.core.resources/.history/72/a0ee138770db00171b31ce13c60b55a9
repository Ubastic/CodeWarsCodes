//Solution for https://www.codewars.com/kata/582c1092306063791c000c00/train/java

public class InfiniteDigitalString {

	public static long findPosition(final String s){
		/*
		//this works
		int a = Integer.parseInt(Character.toString(s.charAt(0)));
		String str = "";
		int index = 1;
		//int iteration = 1;
		while(true){
			//System.out.println("Iteration: " + iteration++);
			if(a == 0)
				break;
			str = String.valueOf(++a);
			//System.out.println("str is: " + str);
			if(!(index + str.length() > s.length())){
				String subStr = s.substring(index, index + str.length());
				//System.out.println("subStr is: " + subStr);
				if(!str.equals(subStr))
					break;
			}
			else{
				//System.out.println("Entered last check");
				str = str.substring(0, s.length() - index);
				String subStr = s.substring(index, s.length());
				if(str.equals(subStr))
					return calcPosition(Integer.parseInt(Character.toString(s.charAt(0))));
			}
			index += str.length();
			//System.out.println("Index is: " + index);
		}
		*/
		for(int length = 1; length <= s.length(); length++)
			for(int lengthIndex = 0; lengthIndex < length; lengthIndex++){
				String a = "";
				for(int i = 0; i < length; i++){
					if(lengthIndex + i < s.length())
						a += Character.toString(s.charAt(lengthIndex + i));
					else
						a += "x";
				}
				//checks if a is a valid number
				if(isValidA(a)){
					boolean goToNextLengthIndex = false;
					
					//Check previous if previous exists
					if(lengthIndex != 0){
						String prev = "";
						//pad with x's
						for(int j = 0; j < length - lengthIndex; j++){
							prev += "x";
						}
						//add the prev string
						for(int k = 0; k < lengthIndex; k++){
							prev += Character.toString(s.charAt(k));
						}
						//if a has an x
						if(a.charAt(a.length()-1) == 'x'){
							long temp = fillInAndConsecutive(a, prev);
							if(temp == -1)
								goToNextLengthIndex = true;
							else
								return temp;
						}
						//if a doesn't have x but previous has x
						else if(!isConsecutive(prev,a))
							goToNextLengthIndex = true;
					}
					while(!goToNextLengthIndex){
						//iterate through string given the a to check if they are consecutive
						int strPos = lengthIndex;
						
						
						
					}
				}
			}
		return 0;
	}
	
	//this works
	public static long calcPosition(long index){
		long sum = 0;
		long checkAmt = 10;
		while(checkAmt < index){
			sum += 9 * (checkAmt / 10) * (Math.log10(checkAmt));
			checkAmt *= 10;
		}
		checkAmt /= 10;
		sum += (index - checkAmt) * Math.log10(checkAmt * 10);
		return sum;
	}
	
	//checks if a is a valid number (can't be 01 or 001 or 093, etc.)
	public static boolean isValidA(String a){
		
	}
	
	//checks if two numbers are consecutive
	public static boolean isConsecutive(String a, String b){
		
	}
	
	//checks prev and a (with x's) to see if they are consecutive
	public static long fillInAndConsecutive(String a, String b){
		//if matches return calcPosition(Integer.parseInt(a))
		//else return -1
	}

}

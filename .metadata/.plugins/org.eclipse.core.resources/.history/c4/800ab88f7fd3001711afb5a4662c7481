import java.util.Arrays;
import java.util.Vector;

public class Lcs {
	
	static String lcs(String a, String b){
		
		if(a.equals("") || b.equals(""))
			return "";

		String output = "";
		
		int pos = 0;
		boolean skip = false;
		boolean reInitPos = false;
		
		while(true){
			reInitPos = false;
			skip = false;
			for(int i = 0; i < pos - 1; i++)
				if(a.charAt(i) == b.charAt(pos)){
					output += a.charAt(i);
					a = a.substring(i + 1, a.length() - 1);
					b = b.substring(pos, b.length() - 1);
					reInitPos = true;
					skip = true;
					break;
				}
			if(!skip){
			for(int j = 0; j < pos; j++)
				if(b.charAt(j) == a.charAt(pos)){
					output += a.charAt(pos);
					b = b.substring(j + 1, b.length() - 1);
					a = a.substring(pos, a.length() - 1);
					reInitPos = true;
					break;
				}
			}
			if(!reInitPos)
				pos = 0;
			else
				pos++;
		}
		
		
		/*
		int pos = 0;
		boolean skip = false;
		boolean reInitPos = false;
		
		while(!arrA.equals("") && !arrB.equals("")){
			skip = false;
			for(int m = 0; m <= pos - 1; m++)
				if(arrA[m] == arrB[pos]){
					char[] tempA = new char[arrA.length - m + 1];
					int index = 0;
					for(int p = m + 1; p < arrA.length; p++)
						tempA[index++] = arrA[p]; 
					arrA = tempA;
					char[] tempB = new char[arrB.length - pos + 1];
					index = 0;
					for(int q = pos + 1; q < arrB.length; q++)
						tempB[index++] = arrB[q];
					arrB = tempB;
					skip = true;
					reInitPos = true;
					break;
				}
			if(!skip){
				for(int n = 0; n <= pos; n++)
					if(arrB[n] == arrA[pos]){
						char[] tempB = new char[arrB.length - n + 1];
						int index = 0;
						for(int p = n + 1; p < arrB.length; p++)
							tempB[index++] = arrB[p];
						arrB = tempB;
						char[] tempA = new char[arrA.length - pos + 1];
						index = 0;
						for(int q = pos + 1; q < arrA.length; q++)
							tempA[index] = arrA[q];
						arrA = tempA;
						reInitPos = true;
						break;
					}
			}
			if(!reInitPos)
				pos++;
			else
				pos = 0;
		}
		*/
		/*
		
		int pos = 0;
		int minM = 0;
		int minN = 0;
		
		boolean skip = false;
		boolean reInitPos = false;
		boolean exitWhile = false;
		while(true){
			skip = false;
			reInitPos = false;
			for(int m = minM; m <= minM + pos - 1; m++){
				if(m == arrA.length){
					exitWhile = true;
					break;
				}
				if(arrA[m] == arrB[minM + pos]){
					v.addElement(arrA[m]);
					minN = minM + pos + 1;
					minM = m + 1;
					skip = true;
					reInitPos = true;
					break;
				}
			}
			if(!skip && !exitWhile){
				for(int n = minN; n <= minN + pos; n++){
					if(n == arrB.length){
						exitWhile = true;
						break;
					}
					else if(arrB[n] == arrA[minN + pos]){
						v.addElement(arrB[n]);
						minM = minN + pos + 1;
						minN = n + 1;
						reInitPos = true;
						break;
					}
				}
			}
			if(exitWhile)
				break;
			else if(!reInitPos)
				pos++;
			else
				pos = 0;
		}
		*/
		String output = "";
		
		for(int p = 0; p < v.size(); p++)
			output += (v.elementAt(p)).toString();
		
		return output;
	}
	
}

//https://www.codewars.com/kata/593ff8b39e1cc4bae9000070/train/java

